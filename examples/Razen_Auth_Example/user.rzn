// User module - defines User struct and related functions

pub struct User {
    username: str,
    email: str,
    password_hash: str,
    is_active: bool,
    login_attempts: int
}

pub fun create_user(username: str, email: str, password: str) -> User {
    return User {
        username: username,
        email: email,
        password_hash: hash_password(password),
        is_active: true,
        login_attempts: 0
    }
}

pub fun validate_email(email: str) -> bool {
    // Simple email validation - check for @ symbol and basic format
    var has_at = false
    var at_position = 0
    var email_len = email.len()
    
    // Check for @ symbol
    for i in 0..email_len {
        var char = email[i]
        if char == "@" {
            if has_at {
                return false  // Multiple @ symbols
            }
            has_at = true
            at_position = i
        }
    }
    
    if !has_at {
        return false
    }
    
    // Check basic format: something@something.something
    if at_position == 0 || at_position == email_len - 1 {
        return false
    }
    
    var domain_part = email[(at_position + 1)..]
    var has_dot = false
    
    for i in 0..domain_part.len() {
        if domain_part[i] == "." {
            has_dot = true
            break
        }
    }
    
    return has_dot
}

pub fun validate_password(password: str) -> bool {
    // Password must be at least 6 characters
    return password.len() >= 6
}

pub fun hash_password(password: str) -> str {
    // Simple hash simulation - in real app would use proper hashing
    var hash = "hash_"
    hash = hash + password + "_secure"
    return hash
}

pub fun verify_password(password: str, hash: str) -> bool {
    var expected_hash = hash_password(password)
    return expected_hash == hash
}

pub fun display_user_info(user: User) {
    println(f"Username: {user.username}")
    println(f"Email: {user.email}")
    println(f"Status: {user.is_active}")
    println(f"Login Attempts: {user.login_attempts}")
}
