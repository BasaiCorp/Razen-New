// Comprehensive Class System Test for Razen Language
// This file demonstrates all class features: classes, methods, inheritance-like behavior with impl blocks

// Basic class declaration with fields and methods
class Person {
    name: str,
    age: int,
    
    // Constructor-like method
    fun new(name: str, age: int) {
        self.name = name
        self.age = age
    }
    
    // Public method
    fun greet() {
        println(f"Hello, my name is {self.name} and I am {self.age} years old")
    }
    
    // Private method
    fun get_birth_year() -> int {
        return 2024 - self.age
    }
    
    // Method with parameters
    fun have_birthday() {
        self.age = self.age + 1
        println(f"{self.name} is now {self.age} years old!")
    }
}

// Class with different field types
class Car {
    brand: str,
    model: str,
    year: int,
    is_running: bool,
    
    fun start() {
        if !self.is_running {
            self.is_running = true
            println(f"The {self.brand} {self.model} is now running")
        } else {
            println("Car is already running")
        }
    }
    
    fun stop() {
        if self.is_running {
            self.is_running = false
            println(f"The {self.brand} {self.model} has stopped")
        } else {
            println("Car is already stopped")
        }
    }
    
    fun get_info() -> str {
        return f"{self.year} {self.brand} {self.model}"
    }
}

// Impl block for extending functionality (like Rust)
impl Person {
    fun is_adult() -> bool {
        return self.age >= 18
    }
    
    fun can_drive() -> bool {
        return self.age >= 16
    }
    
    fun introduce_to(other: Person) {
        println(f"Hi {other.name}, I'm {self.name}")
    }
}

// Another impl block for Car
impl Car {
    fun is_vintage() -> bool {
        return 2024 - self.year > 25
    }
    
    fun honk() {
        println(f"The {self.brand} goes BEEP BEEP!")
    }
}

// Main function to test the class system
fun main() {
    println("=== Razen Class System Test ===")
    
    // Create instances using 'new' keyword
    var person1 = new Person("Alice", 25)
    var person2 = new Person("Bob", 17)
    
    // Call methods
    person1.greet()
    person2.greet()
    
    // Test method calls
    person1.have_birthday()
    
    // Test impl block methods
    if person1.is_adult() {
        println(f"{person1.name} is an adult")
    }
    
    if person2.can_drive() {
        println(f"{person2.name} can drive")
    } else {
        println(f"{person2.name} cannot drive yet")
    }
    
    // Test method with parameters
    person1.introduce_to(person2)
    
    println("\n=== Car Class Test ===")
    
    // Create car instance
    var my_car = new Car()
    my_car.brand = "Toyota"
    my_car.model = "Camry"
    my_car.year = 2020
    my_car.is_running = false
    
    // Test car methods
    println(my_car.get_info())
    my_car.start()
    my_car.honk()
    my_car.stop()
    
    // Test impl methods
    if my_car.is_vintage() {
        println("This car is vintage!")
    } else {
        println("This car is modern")
    }
    
    println("\n=== Class System Test Complete ===")
}
