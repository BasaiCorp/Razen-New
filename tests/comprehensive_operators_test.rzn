// ===== COMPREHENSIVE OPERATORS TEST =====
// Testing increment/decrement, assignment, and bitwise operators

fun main() {
    println("=== COMPREHENSIVE OPERATORS TEST ===")
    
    // ===== INCREMENT/DECREMENT OPERATORS =====
    println("\n1. Increment/Decrement Operators:")
    
    var a = 5
    println("Initial value: " + a)
    
    // Pre-increment
    var b = ++a
    println("After ++a: a=" + a + ", b=" + b)
    
    // Post-increment  
    var c = a++
    println("After a++: a=" + a + ", c=" + c)
    
    // Pre-decrement
    var d = --a
    println("After --a: a=" + a + ", d=" + d)
    
    // Post-decrement
    var e = a--
    println("After a--: a=" + a + ", e=" + e)
    
    // ===== ASSIGNMENT OPERATORS =====
    println("\n2. Assignment Operators:")
    
    var x = 10
    println("Initial x: " + x)
    
    x += 5
    println("After x += 5: " + x)
    
    x -= 3
    println("After x -= 3: " + x)
    
    x *= 2
    println("After x *= 2: " + x)
    
    x /= 4
    println("After x /= 4: " + x)
    
    x %= 3
    println("After x %= 3: " + x)
    
    // ===== BITWISE OPERATORS =====
    println("\n3. Bitwise Operators:")
    
    var p = 12  // Binary: 1100
    var q = 10  // Binary: 1010
    
    println("p = " + p + " (binary: 1100)")
    println("q = " + q + " (binary: 1010)")
    
    var and_result = p & q
    println("p & q = " + and_result + " (binary AND)")
    
    var or_result = p | q
    println("p | q = " + or_result + " (binary OR)")
    
    var xor_result = p ^ q
    println("p ^ q = " + xor_result + " (binary XOR)")
    
    var not_result = ~p
    println("~p = " + not_result + " (binary NOT)")
    
    var left_shift = p << 2
    println("p << 2 = " + left_shift + " (left shift)")
    
    var right_shift = p >> 1
    println("p >> 1 = " + right_shift + " (right shift)")
    
    // ===== COMBINED USAGE =====
    println("\n4. Combined Usage:")
    
    var counter = 0
    counter += 5
    counter *= 2
    counter++
    println("Counter after operations: " + counter)
    
    var flags = 7  // Binary: 0111
    flags &= 5     // Binary: 0101
    flags |= 2     // Add bit 1
    println("Flags after bitwise ops: " + flags)
    
    println("\n=== ALL OPERATORS WORKING PERFECTLY! ===")
}
