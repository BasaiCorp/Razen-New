// Sample Razen program to test syntax highlighting and features
mod main

// Import statements
use math

/// Main function - entry point of the program
fun main() {
    println("Welcome to Razen Language!")
    
    // Variable declarations
    var name: str = "Razen"
    const version: float = 1.0
    var age: int = 2024
    
    // String interpolation
    println(f"Language: {name}, Version: {version}")
    
    // User input
    var userName = input("Enter your name: ")
    println(f"Hello, {userName}!")
    
    // Control flow
    if age > 2020 {
        println("This is a modern language!")
    } elif age == 2020 {
        println("Born in 2020")
    } else {
        println("Older language")
    }
    
    // Loops
    for i in 0..5 {
        println(f"Count: {i}")
    }
    
    var counter: int = 0
    while counter < 3 {
        println(f"Counter: {counter}")
        counter += 1
    }
    
    // Function calls
    var result = add(10, 20)
    println(f"Result: {result}")
    
    // Data structures
    var numbers: array<int> = [1, 2, 3, 4, 5]
    var person: map<str, any> = {"name": "John", "age": 25}
    
    // Pattern matching
    match result {
        30 => println("Perfect!"),
        _ => println("Something else")
    }
    
    // Exception handling
    try {
        var fileContent = read("config.txt")
        println(fileContent)
    } catch error {
        println(f"Error reading file: {error}")
    }
}

/// Add two numbers together
/// 
/// # Arguments
/// 
/// * `a` - First number
/// * `b` - Second number
/// 
/// # Returns
/// 
/// Sum of a and b
pub fun add(a: int, b: int) -> int {
    return a + b
}

// Struct definition
struct Person {
    name: str,
    age: int,
    email: str
}

// Enum definition
enum Status {
    Active,
    Inactive,
    Pending
}

// More complex function with error handling
fun processData(data: array<int>) -> int {
    if data.length == 0 {
        throw "Empty array provided"
    }
    
    var sum: int = 0
    for item in data {
        sum += item
    }
    
    return sum
}
