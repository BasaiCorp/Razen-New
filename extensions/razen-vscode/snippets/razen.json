{
  "Main Function": {
    "prefix": "main",
    "body": [
      "fun main() {",
      "\t$0",
      "}"
    ],
    "description": "Create a main function"
  },
  "Function Declaration": {
    "prefix": "fun",
    "body": [
      "fun ${1:functionName}(${2:parameters}) -> ${3:returnType} {",
      "\t$0",
      "}"
    ],
    "description": "Create a function with parameters and return type"
  },
  "Simple Function": {
    "prefix": "funv",
    "body": [
      "fun ${1:functionName}(${2:parameters}) {",
      "\t$0",
      "}"
    ],
    "description": "Create a void function"
  },
  "Public Function": {
    "prefix": "pubfun",
    "body": [
      "pub fun ${1:functionName}(${2:parameters}) -> ${3:returnType} {",
      "\t$0",
      "}"
    ],
    "description": "Create a public function"
  },
  "Variable Declaration": {
    "prefix": "var",
    "body": [
      "var ${1:variableName}: ${2:type} = ${3:value}"
    ],
    "description": "Declare a mutable variable"
  },
  "Constant Declaration": {
    "prefix": "const",
    "body": [
      "const ${1:constantName}: ${2:type} = ${3:value}"
    ],
    "description": "Declare a constant"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if ${1:condition} {",
      "\t$0",
      "}"
    ],
    "description": "Create an if statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if ${1:condition} {",
      "\t$2",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "Create an if-else statement"
  },
  "If-Elif-Else Statement": {
    "prefix": "ifelif",
    "body": [
      "if ${1:condition1} {",
      "\t$3",
      "} elif ${2:condition2} {",
      "\t$4",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "Create an if-elif-else statement"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "while ${1:condition} {",
      "\t$0",
      "}"
    ],
    "description": "Create a while loop"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for ${1:item} in ${2:iterable} {",
      "\t$0",
      "}"
    ],
    "description": "Create a for loop"
  },
  "For Range Loop": {
    "prefix": "forrange",
    "body": [
      "for ${1:i} in ${2:0}..${3:10} {",
      "\t$0",
      "}"
    ],
    "description": "Create a for loop with range"
  },
  "Match Statement": {
    "prefix": "match",
    "body": [
      "match ${1:expression} {",
      "\t${2:pattern1} => ${3:result1},",
      "\t${4:pattern2} => ${5:result2},",
      "\t_ => ${6:default}",
      "}"
    ],
    "description": "Create a match statement"
  },
  "Try-Catch Block": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$1",
      "} catch ${2:e} {",
      "\t$0",
      "}"
    ],
    "description": "Create a try-catch block"
  },
  "Struct Definition": {
    "prefix": "struct",
    "body": [
      "struct ${1:StructName} {",
      "\t${2:field1}: ${3:type1},",
      "\t${4:field2}: ${5:type2}",
      "}"
    ],
    "description": "Create a struct definition"
  },
  "Enum Definition": {
    "prefix": "enum",
    "body": [
      "enum ${1:EnumName} {",
      "\t${2:Variant1},",
      "\t${3:Variant2},",
      "\t${4:Variant3}",
      "}"
    ],
    "description": "Create an enum definition"
  },
  "Module Declaration": {
    "prefix": "mod",
    "body": [
      "mod ${1:moduleName}"
    ],
    "description": "Declare a module"
  },
  "Use Import": {
    "prefix": "use",
    "body": [
      "use ${1:module}"
    ],
    "description": "Import a module"
  },
  "Print Statement": {
    "prefix": "print",
    "body": [
      "print(${1:\"message\"})"
    ],
    "description": "Print without newline"
  },
  "Println Statement": {
    "prefix": "println",
    "body": [
      "println(${1:\"message\"})"
    ],
    "description": "Print with newline"
  },
  "Input Statement": {
    "prefix": "input",
    "body": [
      "var ${1:userInput} = input(${2:\"Enter value: \"})"
    ],
    "description": "Get user input"
  },
  "String Interpolation": {
    "prefix": "fstring",
    "body": [
      "f\"${1:text} {${2:variable}} ${3:more text}\""
    ],
    "description": "Create an interpolated string"
  },
  "Array Declaration": {
    "prefix": "array",
    "body": [
      "var ${1:arrayName}: array<${2:type}> = [${3:elements}]"
    ],
    "description": "Declare an array"
  },
  "Map Declaration": {
    "prefix": "map",
    "body": [
      "var ${1:mapName}: map<${2:keyType}, ${3:valueType}> = {${4:key}: ${5:value}}"
    ],
    "description": "Declare a map"
  },
  "Return Statement": {
    "prefix": "ret",
    "body": [
      "return ${1:value}"
    ],
    "description": "Return a value"
  },
  "Break Statement": {
    "prefix": "break",
    "body": [
      "break"
    ],
    "description": "Break from loop"
  },
  "Continue Statement": {
    "prefix": "continue",
    "body": [
      "continue"
    ],
    "description": "Continue to next iteration"
  },
  "Throw Statement": {
    "prefix": "throw",
    "body": [
      "throw ${1:\"error message\"}"
    ],
    "description": "Throw an exception"
  },
  "Comment Block": {
    "prefix": "comment",
    "body": [
      "/*",
      " * ${1:Comment description}",
      " */"
    ],
    "description": "Create a block comment"
  },
  "Documentation Comment": {
    "prefix": "doc",
    "body": [
      "/// ${1:Function description}",
      "/// ",
      "/// # Arguments",
      "/// ",
      "/// * `${2:param}` - ${3:Parameter description}",
      "/// ",
      "/// # Returns",
      "/// ",
      "/// ${4:Return description}"
    ],
    "description": "Create a documentation comment"
  },
  "Hello World": {
    "prefix": "hello",
    "body": [
      "fun main() {",
      "\tprintln(\"Hello, world!\")",
      "}"
    ],
    "description": "Create a Hello World program"
  }
}
